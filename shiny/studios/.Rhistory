mergedSid[[3]]$LOS, mergedSid[[4]]$LOS,
mergedSid[[5]]$LOS))
sidCo$quarter <- ifelse(sidCo$month %in% 1:3, 1,
ifelse(sidCo$month %in% 4:6, 2,
ifelse(sidCo$month %in% 7:9, 3, 4)))
sidCo$quartersFrom2003 <- (sidCo$year - 2003) * 4 + sidCo$quarter
sidCoDx <- data.frame(cdi = sidDx$cdi,
hospitalID = trim(sidDx$hospitalID),
quartersFrom2003 = sidDx$quartersFrom2003,
year = sidDx$year,
age = sidCo$age,
los = sidCo$los)
windowSize <- 0
directTransfers <- lapply(resultsList, filterTransfers, days = windowSize)
directTransfers <- lapply(seq(1, 5), mergeHospitalStrings, directTransfers,
mergedSid)
transferDF <- rbind(directTransfers[[1]], directTransfers[[2]],
directTransfers[[3]], directTransfers[[4]],
directTransfers[[5]])
mergedTransfers <- merge(transferDF, sidMonth, by.x = "secondKEY", by.y = "KEY")
mergedTransfers$quarter <- ifelse(mergedTransfers$month %in% 1:3, 1,
ifelse(mergedTransfers$month %in% 4:6, 2,
ifelse(mergedTransfers$month %in% 7:9,
3, 4)))
mergedTransfers$quartersFrom2003 <- (mergedTransfers$year - 2003) * 4 +
mergedTransfers$quarter
hospitals <- data.frame(hospitalID = unique(sidMonth$hospitalID))
count <- 1
daMatrix <- matrix(NA, nrow = nrow(hospitals) * 20, ncol = 3)
for (hospital in 1:nrow(hospitals)) {
for (q in 1:20) {
if (hospitals$hospitalID[hospital] %in%
trim(mergedTransfers$secondHospitalString[mergedTransfers$quartersFrom2003 == q])) {
x <- mergedTransfers[mergedTransfers$quartersFrom2003 == q &
trim(mergedTransfers$secondHospitalString) == hospitals$hospitalID[hospital], ]
x$weights <- 1
if (nrow(x) >= 1) {
daWeights <- aggregate(x$weights,
list(x$firstHospitalString),
sum)
names(daWeights) <- c("hospitalID", "nTransfers")
daIncid <- counts[counts$quartersFrom2003 == q &
trim(counts$hospitalID) %in% trim(x$firstHospitalString), ]
da <- merge(trim(daWeights), trim(daIncid), by = "hospitalID")
daValue <- sum(da$nTransfers)
daMatrix[count, ] <- c(trim(x$secondHospitalString[1]),
q,
daValue)
}
count <- count + 1
} else {
daMatrix[count, ] <- c(trim(hospitals$hospitalID[hospital]),
q,
0)
count <- count + 1
}
}
}
daDataFrame <- data.frame(hospitalID = hospitals$hospitalID[daMatrix[, 1]],
quartersFrom2003 = as.numeric(daMatrix[, 2]),
diseaseAtConnections = as.numeric(daMatrix[, 3]))
daDataFrame <- daDataFrame[!is.na(daDataFrame$diseaseAtConnections), ]
analysisData <- merge(daDataFrame, sidCoDx, by = c("hospitalID",
"quartersFrom2003"))
analysisData$season <- analysisData$quartersFrom2003 %% 4
analysisData$season[analysisData$season == 0] <- 4
analysisData$season <- as.factor(analysisData$season)
analysisData$year <- floor((analysisData$quartersFrom2003 - 1) / 4) + 2003
analysisData <- merge(analysisData, counts, by = c("hospitalID",
"quartersFrom2003"))
analysisData$los[analysisData$los < 0] <- NA
analysisData$age[analysisData$age < 0] <- NA
analysisData$losGroup <- cut(analysisData$los, breaks = c(0, 1, 2, 3, 4, 5,
6, 7, 8, 9, 10, 15,
16, 17, 18, 19, 20,
30, 50, 100, 365),
include.lowest = TRUE)
analysisData$ageGroup <- cut(analysisData$age, seq(0, 120, 10),
include.lowest = TRUE)
keep(analysisData, sure = TRUE)
gc()
q()
setwd("/media/Secondary/HCUP/azSID/AZSid_RYears")
model3 <- lme(cdi ~ year + season + ageGroup + losGroup +
log(incidence) + log(diseaseAtConnections + 1),
data = analysisData,
random = ~ 1 | hospitalID)
library(nlme)
model3 <- lme(cdi ~ year + season + ageGroup + losGroup +
log(incidence) + log(diseaseAtConnections + 1),
data = analysisData,
random = ~ 1 | hospitalID)
completeData <- analysisData[!is.na(analysisData)]
completeData <- analysisData[!is.na(analysisData), ]
summary(analysisData)
completeData <- analysisData[!is.na(analysisData$los), ]
summary(completeData)
completeData <- completeData[!is.na(completeData$age)]
completeData <- completeData[!is.na(completeData$age), ]
model3 <- lme(cdi ~ year + season + ageGroup + losGroup +
log(incidence) + log(diseaseAtConnections + 1),
data = completeData,
random = ~ 1 | hospitalID)
summary(model3)
model3 <- lme(cdi ~ year + season + ageGroup + losGroup +
log(diseaseAtConnections + 1),
data = completeData,
random = ~ 1 | hospitalID)
model3 <- lm(cdi ~ hospitalID +  year + season + ageGroup + losGroup +
log(diseaseAtConnections + 1),
data = completeData)
summary(model3)
gc()
rm(model3)
rm(analysisData)
gc()
gc()
setwd("/media/windows2/HCUP/azSID/AZSid_RYears")
load("transfersSmall.RData")
library(gdata)
# Date: 11/01/2012
# Jacob Simmering [jacob-simmering@uiowa.edu]
# David Campbell  [david-campbell@uiowa.edu]
#===================================================================================================
# this program calculates the interval between events for all R years
#===================================================================================================
load("importData.RData")
#==================================================================================================
# Data structure construction functions
#==================================================================================================
createPatientRows <- function(inVec)
{
count = 1
cPRaux <- function(inputVector)
{
events = (eventsPerPtID[inputVector])
count <<- count + events
patient.rows[inputVector, 1:events] <<- seq(count-events, count-1)
}
sapply(inVec,cPRaux)
}
#==================================================================================================
# Data Computation Functions
#==================================================================================================
processUniquePatients <- function(pt.number){
if (eventsPerPtID[[pt.number]] - 1){
# patient.rows is a vector containing the visits to the hospital
# When var visitLink == uniquePtIDs[pt.number]
pts.rows <- patient.rows[pt.number, seq(1,max(eventsPerPtID))]
pts.rows <- pts.rows[!is.na(pts.rows)]
processPatientRows(pt.number, pts.rows)
}
}
findInterval <- function(admission,discharge){
minimum = as.vector(matrix(9999,1,length(admission)-1))
minHospital = as.vector(matrix(9999,1,length(admission)-1))
for(i in seq(2,length(admission))) {
for(j in seq(1,(i-1))) {
if(j)
{
minimum[i-1] = min(minimum[i-1], admission[i] - discharge[j])
minHospital[i-1] = i
}
}
}
c(minimum, minHospital)
}
processPatientRows <- function(pt.number, pts.rows){
# Create a vector of patient's (PTS) discharge dates.
ptDischargeDate <- dischargeDates[pts.rows]
ptAdmissionDate <- daysToEvent[pts.rows]
rowlength = length(pts.rows)
#Create a vector of intervals between row visit and all other visits for the patient
interval <- findInterval.cmp(ptAdmissionDate, ptDischargeDate)
hospitals <- interval[rowlength:(2*rowlength-2)]
interval <- interval[1:(rowlength-1)]
#[!is.na(pts.rows)]
# We need values for these
#values[1] = pts.rows[1]
#values[2] = pts.rows[interval[26]]
#keys <- mainKEYS[values]
#hospitals <- HospitalIDs[values]
minVector <- seq(1,6)
for ( n in seq(1,rowlength-1)){
minVector[1] <- uniquePtIDs[pt.number]
minVector[2] <- as.numeric(mainKEYS[pts.rows[hospitals[n]-1]])
minVector[3] <- as.numeric(mainKEYS[pts.rows[hospitals[n] ]])
minVector[4] <- HospitalIDs[pts.rows[hospitals[n]-1]]
minVector[5] <- HospitalIDs[pts.rows[hospitals[n] ]]
minVector[6] <- interval[n]
# store in results matrix
results.matrix[pts.rows[n], 1:6] <<- minVector #c(pt.number, keys[1], keys[2], hospitals[1], hospitals[2], interval)
}
}
# reduces the number of variables for the next step, also sorts by visitLink and then daysToEvent
filter <- function(x){
x$DSHOSPID.destring <- as.numeric(factor(x$DSHOSPID))
x$dday <- x$daysToEvent + x$LOS
newX <- subset(x, select = c(KEY, visitLink, DSHOSPID.destring, daysToEvent, dday))
newX <- newX[order(newX$visitLink, newX$daysToEvent),]
return(newX)
}
filterTransfers <- function(x, days = 0) {
intervals <- 0:days
x <- as.data.frame(x)
x <- x[!is.na(x$V1), ]
names(x) <- c("visitLink", "firstKEY", "secondKEY", "firstHospital",
"secondHospital", "interval")
x <- subset(x, interval %in% intervals)
return(x)
}
mergeHospitalStrings <- function(index, transfers, sid) {
complete <- sid[[index]]
first <- data.frame(firstKEY = complete$KEY,
firstHospitalString = complete$DSHOSPID)
second <- data.frame(secondKEY = complete$KEY,
secondHospitalString = complete$DSHOSPID)
transferYear <- transfers[[index]]
transferYear <- merge(transferYear, first, by = 'firstKEY')
transferYear <- merge(transferYear, second, by = 'secondKEY')
return(transferYear)
}
makeNetwork <- function(x) {
x$count <- 1
nTransfers <- aggregate(x$count, by = list(x$firstHospitalString,
x$secondHospitalString), sum)
names(nTransfers) <- c("firstHospital", 'secondHospital', 'edgeWeight')
return(nTransfers)
}
#==================================================================================================
# Compile to bytecode for a bit more speed
#==================================================================================================
library(compiler)
findInterval.cmp <- cmpfun(findInterval)
processPatientRows.cmp <- cmpfun(processPatientRows)
processUniquePatients.cmp <- cmpfun(processUniquePatients)
createPatientRows.cmp <- cmpfun(createPatientRows)
smallSid <- lapply(mergedSid, filter)
dataFrame <- do.call(rbind, smallSid)
dataFrame <- dataFrame[order(dataFrame$visitLink, dataFrame$daysToEvent), ]
results.matrix   <- matrix(NA, nrow = nrow(dataFrame), ncol = 6)
uniquePtIDs <- unique(dataFrame$visitLink)
totalUPtIDs <- NROW(unique(dataFrame$visitLink))
eventsPerPtID <- as.vector(table(dataFrame$visitLink))
patient.rows <- matrix(NA, totalUPtIDs, max(eventsPerPtID))
patientsVector <- as.vector(dataFrame$visitLink)
dischargeDates     <- as.vector(dataFrame$dday)
daysToEvent 	<- as.vector(dataFrame$daysToEvent)
HospitalIDs 	<- as.vector(dataFrame$DSHOSPID.destring)
mainKEYS    	<- as.vector(dataFrame$KEY)
values <- seq(1,2)
hide <- createPatientRows.cmp(seq(1,totalUPtIDs))
start.time <- Sys.time()
result = sapply(seq(1,totalUPtIDs),processUniquePatients.cmp)
#result = sapply(seq(1,100),processUniquePatients)
end.time <- Sys.time()
print(end.time-start.time)
head(resultMa)
head(results.matrix)
summary(results.matrix)
save.image("~/pooledImportData.RData")
q()
install.packages("DBI")
install.packages("RMySQL")
install.packages("RMySQL")
library(DBI)
library(RMySQL)
m<-dbDriver("MySQL");
con<-dbConnect(m, user='simmerin',
password='simmerin',
host='localhost',
dbname='movies');
ids <- dbSendQuery(con, "select * from rtid")
summary(ids)
ids
ids <- fetch(ids)
ids <- fetch(ids, n = -1)
ids <- dbSendQuery(con, "select * from rtid")
ids <- dbSendQuery(con, "select * from rtid")
odbcClose(con)
con <- dbConnect(m, user='simmerin',
password='simmerin',
host='localhost',
dbname='movies')
ids <- dbSendQuery(con, "select * from rtid")
ids2 <- fetch(ids, n = -1)
dbClearResult(ids)
ids <- dGetQuery(con, "select * from rtid")
ids <- ddGetQuery(con, "select * from rtid")
ids <- dbGetQuery(con, "select * from rtid")
ids
library(DBI)
library(RMySQL)
m <- dbDriver("MySQL");
con <- dbConnect(m, user='simmerin',
password='simmerin',
host='localhost',
dbname='movies')
studios <- dbGetQuery(con, "select distinct studio from metadata")
studios
studio = "Paramount"
films <- dbGetQuery(con, paste("select rtid, score from metadata where studio = ", studio, sep = ""))
films <- dbGetQuery(con, paste("select rtid, score from metadata where studio = ", studio, sep = ""))
paste("select rtid, score from metadata where studio = ", studio, sep = "")
paste("select rtid, score from metadata where studio = '", studio, "'", sep = "")
films <- dbGetQuery(con,  paste("select rtid, score from metadata where studio = '", studio, "'", sep = ""))
films <- dbGetQuery(con, paste("select rtid, criticSCore from metadata where studio = '", studio, "'", sep = ""))
films
genres <- dbGetQuery(con, paste("select rtid, genre from genres where rtid in", scores$rtid, sep = ""))
scores <- dbGetQuery(con, paste("select rtid, criticSCore from metadata where studio = '", studio, "'", sep = ""))
genres <- dbGetQuery(con, paste("select rtid, genre from genres where rtid in", scores$rtid, sep = ""))
genres <- dbGetQuery(con, paste("select rtid, genre from genres where rtid in ", scores$rtid, sep = ""))
genres <- dbGetQuery(con, paste("select rtid, genre from genres where rtid in (
select rtid from meta data where studio = '", studio, "')", sep = ""))
genres <- dbGetQuery(con, paste("select rtid, genre from genres where rtid in (
select rtid from metadata where studio = '", studio, "')", sep = ""))
genres
t <- merge(genres, scores, by = rtid)
t <- merge(genres, scores, by = "rtid")
data <- merge(scores, genres, by = "rtid")
data
scores <- dbGetQuery(con, paste("select rtid, criticScore from metadata where studio = '", studio, "'", sep = ""))
genres <- dbGetQuery(con, paste("select rtid, genre from genres where rtid in (
select rtid from metadata where studio = '", studio, "')", sep = ""))
data <- merge(scores, genres, by = "rtid")
mByg <- aggergate(data$criticScorecriticScore, by = list(data$genre),
mean)
mByg <- aggregate(data$criticScorecriticScore, by = list(data$genre),
mean)
mByg <- aggregate(data$criticScore, by = list(data$genre),
mean)
mByg
mByG
cByC <- aggregate(rep(1, length(data)), by = list(data$genre),
count)
cByC <- aggregate(rep(1, length(data)), by = list(data$genre),
sum)
cByC <- aggregate(rep(1, length(data$genre)), by = list(data$genre),
sum)
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.1) +
geom_point(aes(x = Group.1, y = x), data = mByG)
library(ggplot2)
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.1) +
geom_point(aes(x = Group.1, y = x), data = mByG)
mByG <- aggregate(data$criticScore, by = list(data$genre),
mean)
cByC <- aggregate(rep(1, length(data$genre)), by = list(data$genre),
sum)
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.1) +
geom_point(aes(x = Group.1, y = x), data = mByG)
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG)
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG) +
geom_hline(aes(yintercept = mean(data$criticScore)))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2)
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2)
cByG <- aggregate(rep(1, length(data$genre)), by = list(data$genre),
sum)
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2)
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete("") +
scale_y_continuous("Critic Score")
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete("") +
scale_y_continuous("Critic Score") +
theme(axis.title.x = element_text(angle = 45))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete("") +
scale_y_continuous("Critic Score") +
theme(axis.title.x = element_text(angle = 90))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete(NA) +
scale_y_continuous("Critic Score") +
theme(axis.ticks.x = element_text(angle = 90))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete(NA) +
scale_y_continuous("Critic Score") +
theme(axis.ticks.x = element_line(angle = 90))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete(NA) +
scale_y_continuous("Critic Score") +
theme(axis.text.x = element_text(angle = 90))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete(NA) +
scale_y_continuous("Critic Score") +
theme(axis.text.x = element_text(angle = 45))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete() +
scale_y_continuous("Critic Score") +
theme(axis.text.x = element_text(angle = 45))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete(label = NA) +
scale_y_continuous("Critic Score") +
theme(axis.text.x = element_text(angle = 45))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete(name = NA) +
scale_y_continuous("Critic Score") +
theme(axis.text.x = element_text(angle = 45))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete(name = "NA") +
scale_y_continuous("Critic Score") +
theme(axis.text.x = element_text(angle = 45))
ggplot() +
geom_point(aes(x = genre, y = criticScore), data = data, alpha = 0.25) +
geom_point(aes(x = Group.1, y = x), data = mByG, size = cByG$x) +
geom_hline(aes(yintercept = mean(data$criticScore)), lty = 2) +
theme_bw() +
scale_x_discrete(name = "") +
scale_y_continuous("Critic Score") +
theme(axis.text.x = element_text(angle = 90))
shiny::runApp()
library(shiny)
install.packages("shiny")
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
library(DBI)
library(RMySQL)
m <- dbDriver("MySQL");
con <- dbConnect(m, user='simmerin',
password='simmerin',
host='localhost',
dbname='movies')
studios <- dbGetQuery(con, "select distinct studio from metadata")
studios
selected = "DreamWorks Studios")),
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
mainPanel(
\
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
t <- c(1, 2)
studios$studio
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
rm(con)
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
shiny::runApp("~/movies/shiny/studios/")
dbDisconnect(con)
shiny::runApp("~/movies/shiny/studios/")
